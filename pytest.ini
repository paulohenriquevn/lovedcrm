[tool:pytest]
# Pytest configuration for automated testing

# Test discovery
testpaths = tests api
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Default options
addopts = 
    -ra
    -q
    --strict-markers
    --strict-config
    --tb=short
    --cov=api
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=40
    --cov-branch
    --disable-warnings

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, use real services)
    e2e: End-to-end tests (slowest, full application)
    security: Security-focused tests
    performance: Performance and load tests
    slow: Tests that take more than 5 seconds
    smoke: Basic functionality tests
    database: Tests that require database access
    redis: Tests that require Redis access
    docker: Tests that require Docker containers
    api: Tests for API endpoints
    auth: Authentication and authorization tests
    billing: Billing and subscription tests
    email: Email-related tests
    external: Tests that require external services
    admin: Admin functionality tests
    analytics: Analytics and reporting tests
    chat: Chat system tests
    organizations: Organization management tests
    users: User management tests
    subscriptions: Subscription management tests
    metrics: Metrics and monitoring tests
    monitoring: System monitoring tests

# Test filtering
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    ignore:.*unclosed.*:ResourceWarning

# Asyncio configuration
asyncio_mode = auto

# Parallel testing configuration (when using pytest-xdist)
# Run with: pytest -n auto
# or: pytest -n 4 (for 4 workers)

# Coverage configuration
[coverage:run]
source = api
omit = 
    */tests/*
    */venv/*
    */env/*
    */migrations/*
    api/utils/__init__.py
    api/scripts/*
branch = True
parallel = True

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

precision = 2
show_missing = True
sort = Cover

[coverage:html]
directory = htmlcov
title = API Test Coverage Report

[coverage:xml]
output = coverage.xml