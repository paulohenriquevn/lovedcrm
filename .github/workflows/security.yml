name: Security Monitoring

permissions:
  contents: read
  security-events: write
  actions: read

on:
  schedule:
    # Run security scans daily at 02:00 UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop, feature/*]
    paths:
      - 'api/**'
      - 'requirements.txt'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [main, develop]
    paths:
      - 'api/**'
      - 'requirements.txt'
      - 'package.json'
      - 'package-lock.json'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =================== DEPENDENCY VULNERABILITY SCAN ===================
  dependency-scan:
    name: Dependency Vulnerabilities
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          npm ci
          pip install -r requirements.txt
          pip install safety pip-audit

      - name: Frontend Dependency Audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          echo "NPM Audit Results:"
          npm audit --audit-level=moderate || echo "Found vulnerabilities - check npm-audit.json for details"

      - name: Python Dependency Security
        run: |
          safety check --json --output safety-report.json || true
          safety check
          pip-audit --format=json --output=pip-audit.json || true
          pip-audit

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-reports
          path: |
            npm-audit.json
            safety-report.json
            pip-audit.json
          retention-days: 30

  # =================== CODE SECURITY ANALYSIS ===================
  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Security Tools
        run: |
          pip install bandit[toml] semgrep

      - name: Python Security Scan (Bandit)
        run: |
          bandit -r ./api -f json -o bandit-report.json --severity-level medium --confidence-level medium || true
          bandit -r ./api -f txt --severity-level medium --confidence-level medium

      - name: Multi-Language Security (Semgrep)
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto .

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-security-reports
          path: |
            bandit-report.json
            semgrep-report.json
          retention-days: 30

  # =================== SECRETS DETECTION ===================
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50

      - name: TruffleHog Secrets Scan (Git)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: ${{ github.sha }}
          extra_args: --debug --only-verified --max-depth=50
        continue-on-error: true

      - name: TruffleHog Filesystem Scan (Fallback)
        if: failure()
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified --no-git

      - name: GitLeaks Secrets Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # =================== CONTAINER SECURITY ===================
  container-security:
    name: Container Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Image
        run: |
          docker build -t backend-security-scan:latest -f Dockerfile .

      - name: Container Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'backend-security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Upload Container Security Report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # =================== SECURITY REPORT SUMMARY ===================
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan, container-security]
    if: always()

    steps:
      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Scan: ${{ needs.dependency-scan.result == 'success' && 'Passed' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Security: ${{ needs.code-security-scan.result == 'success' && 'Passed' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secrets Detection: ${{ needs.secrets-scan.result == 'success' && 'Passed' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Container Security: ${{ needs.container-security.result == 'success' && 'Passed' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Quick Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Production Health](https://backend-production-fd50.up.railway.app/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [API Documentation](https://backend-production-fd50.up.railway.app/docs)" >> $GITHUB_STEP_SUMMARY

      - name: Security Failure Alert
        if: |
          needs.dependency-scan.result == 'failure' || 
          needs.code-security-scan.result == 'failure'
        run: |
          echo "SECURITY ALERT: Critical security scans failed!"
          echo "Please review the security reports and address any critical vulnerabilities."
          echo "Note: Secrets detection and container security failures are logged but don't fail the workflow."
          exit 1

      - name: Security Success
        if: |
          needs.dependency-scan.result == 'success' && 
          needs.code-security-scan.result == 'success'
        run: |
          echo "Critical security scans passed successfully!"
          echo "Dependency Scan: ✅ Passed"
          echo "Code Security: ✅ Passed" 
          echo "Secrets Detection: ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '⚠️ Issues (non-blocking)' }}"
          echo "Container Security: ${{ needs.container-security.result == 'success' && '✅ Passed' || '⚠️ Issues (non-blocking)' }}"
          echo ""
          echo "System security status: HEALTHY"
