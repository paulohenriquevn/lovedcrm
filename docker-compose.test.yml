services:
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: saas_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5434:5432'
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./migrations/init-test-container.sql:/docker-entrypoint-initdb.d/01-init-test.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /tmp
      - /var/run/postgresql

  redis-test:
    image: redis:7-alpine
    ports:
      - '6380:6379'
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /tmp

  # Mock Services for External APIs
  mock-stripe:
    image: wiremock/wiremock:latest
    ports:
      - '9080:8080'
    volumes:
      - ./tests/e2e/mocks/stripe:/home/wiremock/mappings
      - ./tests/e2e/mocks/stripe/__files:/home/wiremock/__files
    environment:
      - WIREMOCK_OPTIONS=--port 8080 --verbose --global-response-templating
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/__admin/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mock-email:
    image: mailhog/mailhog:latest
    ports:
      - '1025:1025' # SMTP
      - '8025:8025' # Web UI
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '1025']
      interval: 10s
      timeout: 5s
      retries: 5

  mock-s3:
    image: minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=testuser
      - MINIO_ROOT_PASSWORD=testpass123
      - MINIO_BROWSER=on
    volumes:
      - minio_test_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 10s
      timeout: 5s
      retries: 5

  # Test API service
  api-test:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - '8001:8000'
    environment:
      # Core configuration
      - DATABASE_URL=postgresql://postgres:postgres@postgres-test:5432/saas_test
      - REDIS_URL=redis://redis-test:6379
      - SECRET_KEY=e2e_84c3b1729a45f6e8d07c9a2b456789012345678901234567890abcdef123456
      - APP_NAME=SaaS E2E Test
      - ENVIRONMENT=test
      - LOG_LEVEL=DEBUG
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

      # Email configuration (disabled for tests)
      - EMAIL_ENABLED=false

      # Mock service URLs
      - STRIPE_API_BASE_URL=http://mock-stripe:8080
      - AWS_S3_ENDPOINT_URL=http://mock-s3:9000

      # Mock credentials
      - STRIPE_PUBLISHABLE_KEY=pk_test_mock_key
      - STRIPE_SECRET_KEY=sk_test_mock_key
      - STRIPE_WEBHOOK_SECRET=whsec_test_mock_secret
      - AWS_ACCESS_KEY_ID=testuser
      - AWS_SECRET_ACCESS_KEY=testpass123
      - AWS_S3_BUCKET=test-bucket
      - AWS_REGION=us-east-1

      # Google OAuth mock credentials for testing
      - GOOGLE_CLIENT_ID=mock_google_client_id_for_tests
      - GOOGLE_CLIENT_SECRET=mock_google_client_secret_for_tests

      - TEST_RECAPTCHA_ENABLED=false
      - RECAPTCHA_SITE_KEY=mock_recaptcha_site_key
      - RECAPTCHA_SECRET_KEY=mock_recaptcha_secret_key

      # SAAS Mode Configuration (B2C by default - tests use skipif for mode-specific tests)
      - SAAS_MODE=B2B
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      mock-stripe:
        condition: service_healthy
      mock-email:
        condition: service_healthy
      mock-s3:
        condition: service_healthy
    volumes:
      - ./api:/app/api
      - ./migrations:/app/migrations
      - ./scripts:/app/scripts:ro
    command: >
      sh -c "
        echo 'ðŸ§ª Starting test API container...' &&
        echo 'Waiting for database to be ready...' &&
        until pg_isready -h postgres-test -p 5432 -U postgres; do
          echo 'Waiting for DB...'
          sleep 2
        done &&
        echo 'Database is ready!' &&
        echo 'ðŸ”„ Running database migrations...' &&
        cd migrations && DATABASE_HOST=postgres-test DATABASE_PORT=5432 DATABASE_NAME=saas_test ./migrate apply &&
        echo 'ðŸš€ Starting API server...' &&
        cd /app && exec uvicorn api.main:app --host 0.0.0.0 --port 8000
      "
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_test_data:
  redis_test_data:
  minio_test_data:
