[MASTER]
# Use multiple processes to speed up Pylint
jobs = 0

# Python code paths
init-hook = 'import sys; sys.path.append(".")'

# Pickle collected data for later comparisons
persistent = yes

# List of plugins (as comma separated values)
load-plugins = 

# Minimum Python version for version-dependent checks  
py-version = 3.10

[MESSAGES CONTROL]
# Disable specific checks that conflict with other tools or are too strict
disable = 
    # Docstring related (too noisy for development)
    missing-module-docstring,
    missing-class-docstring,
    missing-function-docstring,
    
    # Import related (handled by isort)
    wrong-import-order,
    wrong-import-position,
    ungrouped-imports,
    
    # Formatting related (handled by Black)
    line-too-long,
    trailing-whitespace,
    missing-final-newline,
    
    # Type checking related (handled by MyPy)
    no-member,
    maybe-no-member,
    
    # Too restrictive for FastAPI patterns
    too-few-public-methods,
    too-many-arguments,
    too-many-locals,
    too-many-branches,
    too-many-statements,
    too-many-lines,
    
    # Logging format (f-strings are OK for modern Python)
    logging-fstring-interpolation,
    
    # Exception handling (sometimes broad exceptions are needed)
    broad-exception-caught,
    
    # Import related that conflicts with other tools
    unused-import,
    
    # SQLAlchemy patterns
    attribute-defined-outside-init,
    not-callable,
    unsubscriptable-object,
    
    # FastAPI dependency patterns
    unused-argument,
    
    # Development related
    fixme,
    
    # Lambda warnings (sometimes necessary for schemas)
    unnecessary-lambda,
    
    # Django-style naming (not applicable to FastAPI)
    invalid-name

# Enable specific checks that are valuable
enable = 
    # Logic errors
    unreachable,
    duplicate-key,
    
    # Code smells
    redefined-outer-name,
    redefined-builtin,
    unused-variable,
    
    # Security
    exec-used,
    eval-used

[REPORTS]
# Set the output format
output-format = colorized

# Include message's id in output
msg-template = {path}:{line}:{column}: [{msg_id}({symbol})] {msg}

# Evaluate the report with external tools
reports = no


[BASIC]
# Good variable names
good-names = i,j,k,ex,Run,_,id,db,pk,

# Bad variable names
bad-names = foo,bar,baz,toto,tutu,tata

# Regular expressions for different name types
module-rgx = (([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
const-rgx = (([A-Z_][A-Z0-9_]*)|(__.*__))$
class-rgx = [A-Z_][a-zA-Z0-9]+$
function-rgx = [a-z_][a-z0-9_]{2,30}$
method-rgx = [a-z_][a-z0-9_]{2,30}$
attr-rgx = [a-z_][a-z0-9_]{2,30}$
argument-rgx = [a-z_][a-z0-9_]{2,30}$
variable-rgx = [a-z_][a-z0-9_]{2,30}$
inlinevar-rgx = [A-Za-z_][A-Za-z0-9_]*$

[FORMAT]
# Maximum number of characters on a single line (handled by Black)
max-line-length = 100

# String used as indentation unit (handled by Black)
indent-string = '    '

# Expected format of line ending (handled by Black)
expected-line-ending-format = LF

[MISCELLANEOUS]
# List of note tags to take into consideration
notes = FIXME,XXX,TODO

[SIMILARITIES]
# Minimum lines number for a block to be duplicated
min-similarity-lines = 10

# Ignore comments when computing similarities
ignore-comments = yes

# Ignore docstrings when computing similarities
ignore-docstrings = yes

# Ignore imports when computing similarities
ignore-imports = yes

[SPELLING]
# Spelling dictionary name
spelling-dict = 

# List of comma separated words that should not be checked
spelling-ignore-words = 

[TYPECHECK]
# List of decorators that produce context managers
contextmanager-decorators = contextlib.contextmanager

# List of module names that can be imported at any level
ignore-mixin-members = yes

# List of classes names that should be ignored for typecheck
ignored-classes = SQLObject, optparse.Values, thread._local, _thread._local

# List of members which are set dynamically and missed by pylint inference
generated-members = 

[VARIABLES]
# Tells whether we should check for unused import in __init__ files
init-import = no

# A regular expression matching the name of dummy variables
dummy-variables-rgx = _+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes
defining-attr-methods = __init__,__new__,setUp,__post_init__

# List of valid names for the first argument in a class method
valid-classmethod-first-arg = cls

# List of valid names for the first argument in a metaclass class method
valid-metaclass-classmethod-first-arg = cls

[DESIGN]
# Maximum number of arguments for function / method (be flexible for FastAPI)
max-args = 8

# Maximum number of attributes for a class
max-attributes = 15

# Maximum number of boolean expressions in an if statement
max-bool-expr = 5

# Maximum number of branch for function / method body
max-branches = 15

# Maximum number of locals for function / method body
max-locals = 20

# Maximum number of parents for a class
max-parents = 7

# Maximum number of public methods for a class
max-public-methods = 25

# Maximum number of return / yield for function / method body
max-returns = 10

# Maximum number of statements in function / method body
max-statements = 60

# Minimum number of public methods for a class
min-public-methods = 1

[IMPORTS]
# Allow wildcard imports from modules that define __all__
allow-wildcard-with-all = no

# Analyse import fallback blocks
analyse-fallback-blocks = no

# Deprecated modules
deprecated-modules = regsub,TERMIOS,Bastion,rexec